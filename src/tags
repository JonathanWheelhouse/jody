!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ATTACK	main.c	/^enum state { ATTACK, EVADE };$/;"	e	enum:state	file:
AddParticle	particle.c	/^static void AddParticle(particle_p particle)$/;"	f	file:
BACKGROUND_H	background.h	2;"	d
CleanupScripting	scripting.c	/^void CleanupScripting(void)$/;"	f
CreateHicolorPixel	particle.c	/^static Uint16 CreateHicolorPixel(SDL_PixelFormat *fmt, Uint8 red, Uint8 green, Uint8 blue)$/;"	f	file:
CreateParticleExplosion	particle.c	/^void CreateParticleExplosion(int x, int y, int r, int g, int b, int energy, int density)$/;"	f
DeleteParticle	particle.c	/^static void DeleteParticle(int index)$/;"	f	file:
DrawBackground	background.c	/^void DrawBackground(SDL_Surface *dest, int camera_x, int camera_y)$/;"	f
DrawParallax	background.c	/^void DrawParallax(SDL_Surface *dest, int camera_x, int camera_y)$/;"	f
DrawParticles	particle.c	/^void DrawParticles(SDL_Surface *dest, int camera_x, int camera_y)$/;"	f
DrawPlayer	main.c	/^static void DrawPlayer(player_p p)$/;"	f	file:
EVADE	main.c	/^enum state { ATTACK, EVADE };$/;"	e	enum:state	file:
GAMEDEFS_H	gamedefs.h	2;"	d
IMG_DIR	img_dir.h	5;"	d
IMG_DIR_H	img_dir.h	3;"	d
InitBackground	background.c	/^void InitBackground()$/;"	f
InitOpponent	main.c	/^static void InitOpponent()$/;"	f	file:
InitPlayer	main.c	/^static void InitPlayer()$/;"	f	file:
InitScripting	scripting.c	/^void InitScripting(void)$/;"	f
LoadGameData	resources.c	/^void LoadGameData(void)$/;"	f
LoadGameScript	scripting.c	/^int LoadGameScript(char *filename)$/;"	f
MAX_PARTICLES	gamedefs.h	9;"	d
OPP_COMPUTER	main.c	/^enum { OPP_COMPUTER, OPP_NETWORK } opponent_type;$/;"	e	file:
OPP_NETWORK	main.c	/^enum { OPP_COMPUTER, OPP_NETWORK } opponent_type;$/;"	e	file:
PARALLAX_BACK_FACTOR	gamedefs.h	32;"	d
PARALLAX_FRONT_FACTOR	gamedefs.h	33;"	d
PARALLAX_GRID_HEIGHT	gamedefs.h	40;"	d
PARALLAX_GRID_WIDTH	gamedefs.h	39;"	d
PARTICLE_H	particle.h	2;"	d
PI	gamedefs.h	42;"	d
PLAYER_FORWARD_THRUST	gamedefs.h	27;"	d
PLAYER_HEIGHT	gamedefs.h	13;"	d
PLAYER_MAX_VELOCITY	gamedefs.h	24;"	d
PLAYER_MIN_VELOCITY	gamedefs.h	25;"	d
PLAYER_REVERSE_THRUST	gamedefs.h	28;"	d
PLAYER_WIDTH	gamedefs.h	12;"	d
PlayGame	main.c	/^static void PlayGame()$/;"	f	file:
RESOURCES_H	resources.h	2;"	d
RunGameScript	scripting.c	/^int RunGameScript()$/;"	f
SCREEN_HEIGHT	gamedefs.h	6;"	d
SCREEN_WIDTH	gamedefs.h	5;"	d
SCRIPTING_H	scripting.h	2;"	d
TILE_HEIGHT	gamedefs.h	17;"	d
TILE_WIDTH	gamedefs.h	16;"	d
UnloadGameData	resources.c	/^void UnloadGameData(void)$/;"	f
UpdateParticles	particle.c	/^void UpdateParticles(void)$/;"	f
UpdatePlayer	main.c	/^static void UpdatePlayer(player_p p)$/;"	f	file:
WORLD_HEIGHT	gamedefs.h	21;"	d
WORLD_WIDTH	gamedefs.h	20;"	d
_GNU_SOURCE	main.c	1;"	d	file:
_GNU_SOURCE	resources.c	1;"	d	file:
accel	gamedefs.h	/^	double accel;		\/* acceleration in pixels\/frame^2 *\/$/;"	m	struct:player_s
active_particles	particle.c	/^int active_particles = 0;$/;"	v
angle	gamedefs.h	/^	double angle;		\/* in clockwise degrees, 0 -> due east *\/$/;"	m	struct:player_s
angle	particle.h	/^    double angle;	\/* angle of the particle *\/$/;"	m	struct:particle_s
b	particle.h	/^    int r, g, b;	\/* color *\/$/;"	m	struct:particle_s
back_star_tiles	resources.c	/^SDL_Surface *back_star_tiles;	\/* for the star background *\/$/;"	v
back_tiles	background.c	/^static int back_tiles[PARALLAX_GRID_WIDTH][PARALLAX_GRID_HEIGHT];$/;"	v	file:
camera_x	main.c	/^static int camera_x, camera_y;	\/* position of 640x480 viewport within world *\/$/;"	v	file:
camera_y	main.c	/^static int camera_x, camera_y;	\/* position of 640x480 viewport within world *\/$/;"	v	file:
computer_accel	c_builtins.c	/^SCM computer_accel(void)$/;"	f
computer_angle	c_builtins.c	/^SCM computer_angle(void)$/;"	f
computer_x	c_builtins.c	/^SCM computer_x(void)$/;"	f
computer_y	c_builtins.c	/^SCM computer_y(void)$/;"	f
doublebuf	main.c	/^int doublebuf = 0;$/;"	v
energy	particle.h	/^    double energy;      \/* velocity of the particle *\/$/;"	m	struct:particle_s
file_name	resources.c	/^static char * file_name(char *name)$/;"	f	file:
fire_weapon	c_builtins.c	/^SCM fire_weapon(void)$/;"	f
front_star_tiles	resources.c	/^SDL_Surface *front_star_tiles;	\/* for the parallaxing star layer *\/$/;"	v
front_tiles	background.c	/^static int front_tiles[PARALLAX_GRID_WIDTH][PARALLAX_GRID_HEIGHT];$/;"	v	file:
fullscreen	main.c	/^int fullscreen = 0;$/;"	v
g	particle.h	/^    int r, g, b;	\/* color *\/$/;"	m	struct:particle_s
getrandom	background.c	/^static unsigned int getrandom()$/;"	f	file:
getrandom	main.c	/^static unsigned int getrandom()$/;"	f	file:
hwsurface	main.c	/^int hwsurface = 0;$/;"	v
initrandom	background.c	/^static void initrandom()$/;"	f	file:
initrandom	main.c	/^static void initrandom()$/;"	f	file:
main	main.c	/^int main(int argc, char *argv[])$/;"	f
main_prog	main.c	/^void main_prog(int argc, char *argv[])$/;"	f
num_star_tiles	resources.c	/^int num_star_tiles;		\/* derived from the width of the loaded strips *\/$/;"	v
opponent	main.c	/^player_t opponent;		\/* scripted or networked opponent *\/$/;"	v
opponent_type	main.c	/^enum { OPP_COMPUTER, OPP_NETWORK } opponent_type;$/;"	v
particle_p	particle.h	/^} particle_t, *particle_p;$/;"	t
particle_s	particle.h	/^typedef struct particle_s {$/;"	s
particle_t	particle.h	/^} particle_t, *particle_p;$/;"	t
particles	particle.c	/^particle_t particles[MAX_PARTICLES];$/;"	v
play_computer	main.c	/^static void play_computer(void)$/;"	f	file:
player	main.c	/^player_t player;		\/* the player sitting at the local keyboard *\/$/;"	v
player_accel	c_builtins.c	/^SCM player_accel(void)$/;"	f
player_angle	c_builtins.c	/^SCM player_angle(void)$/;"	f
player_forward_thrust	c_builtins.c	/^SCM player_forward_thrust(void)$/;"	f
player_p	gamedefs.h	/^} player_t, *player_p;$/;"	t
player_reverse_thrust	c_builtins.c	/^SCM player_reverse_thrust(void)$/;"	f
player_s	gamedefs.h	/^typedef struct player_s {$/;"	s
player_t	gamedefs.h	/^} player_t, *player_p;$/;"	t
player_x	c_builtins.c	/^SCM player_x(void)$/;"	f
player_y	c_builtins.c	/^SCM player_y(void)$/;"	f
r	particle.h	/^    int r, g, b;	\/* color *\/$/;"	m	struct:particle_s
scm_atan2	c_builtins.c	/^SCM scm_atan2(SCM y, SCM x)$/;"	f
screen	main.c	/^SDL_Surface *screen;		\/* global for convenience *\/$/;"	v
screen_x	gamedefs.h	/^	int screen_x,screen_y;	\/* onscreen coordinates *\/$/;"	m	struct:player_s
screen_y	gamedefs.h	/^	int screen_x,screen_y;	\/* onscreen coordinates *\/$/;"	m	struct:player_s
script_name	main.c	/^static char * script_name(char *dir)$/;"	f	file:
seed	background.c	/^static Sint32 seed = 0;$/;"	v	file:
seed	main.c	/^static Sint32 seed = 0;$/;"	v	file:
set_computer_accel	c_builtins.c	/^SCM set_computer_accel(SCM c_ac)$/;"	f
set_computer_angle	c_builtins.c	/^SCM set_computer_angle(SCM c_an)$/;"	f
set_computer_x	c_builtins.c	/^SCM set_computer_x(SCM c_x)$/;"	f
set_computer_y	c_builtins.c	/^SCM set_computer_y(SCM c_y)$/;"	f
set_player_accel	c_builtins.c	/^SCM set_player_accel(SCM p_ac)$/;"	f
set_player_angle	c_builtins.c	/^SCM set_player_angle(SCM p_an)$/;"	f
set_player_x	c_builtins.c	/^SCM set_player_x(SCM p_x)$/;"	f
set_player_y	c_builtins.c	/^SCM set_player_y(SCM p_y)$/;"	f
shields	gamedefs.h	/^	int shields;		\/* shield strength left *\/$/;"	m	struct:player_s
ship_strip	resources.c	/^SDL_Surface *ship_strip;	\/* rotating ship in 2-degree increments *\/$/;"	v
state	main.c	/^enum state { ATTACK, EVADE };$/;"	g	file:
target_x	main.c	/^int target_x = 0;$/;"	v
target_y	main.c	/^int target_y = 0;$/;"	v
time_scale	main.c	/^double time_scale = 0;$/;"	v
velocity	gamedefs.h	/^	double velocity;	\/* velocity in pixels per frame *\/$/;"	m	struct:player_s
world_height	c_builtins.c	/^SCM world_height(void)$/;"	f
world_width	c_builtins.c	/^SCM world_width(void)$/;"	f
world_x	gamedefs.h	/^	double world_x,world_y;	\/* coordinates in the world *\/$/;"	m	struct:player_s
world_y	gamedefs.h	/^	double world_x,world_y;	\/* coordinates in the world *\/$/;"	m	struct:player_s
x	particle.h	/^    double x,y;		\/* coordinates of the particle *\/$/;"	m	struct:particle_s
y	particle.h	/^    double x,y;		\/* coordinates of the particle *\/$/;"	m	struct:particle_s
